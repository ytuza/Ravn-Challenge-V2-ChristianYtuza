{"version":3,"sources":["iconos/index.js","components/Person.js","components/Properties.js","components/People.js","App.js","reportWebVitals.js","index.js"],"names":["library","add","faSpinner","faChevronRight","PERSON_FRAGMENT","gql","Specie","Person","node","species","className","name","homeworld","func","allPeople","edges","map","icon","onClick","id","fragments","PeopleConnection","capitalizeFirstLetter","string","charAt","toUpperCase","slice","Properties","eyeColor","hairColor","skinColor","birthYear","vehicleConnection","Vehicle","PEOPLE_QUERY","People","useState","setMyProps","useQuery","variables","after","loading","error","data","fetchMore","nodeT","setnode","spin","console","log","Character","filter","bottomOffset","onEnter","pageInfo","hasNextPage","endCursor","updateQuery","prevResult","fetchMoreResult","client","ApolloClient","uri","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.765627b3.chunk.js","sourcesContent":["import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport {\r\n  faSpinner,\r\n  faChevronRight\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(\r\n  faSpinner,\r\n  faChevronRight\r\n);\r\n","import React , {useState} from 'react';\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './person.css';\r\n\r\n\r\n\r\nconst PERSON_FRAGMENT = gql`\r\n  fragment PersonFragment on PeopleConnection {\r\n    edges{\r\n      node{\r\n        id\r\n        name\r\n        eyeColor\r\n        hairColor\r\n        skinColor\r\n        birthYear\r\n\r\n        vehicleConnection{\r\n          edges{\r\n            node{\r\n              id\r\n              name\r\n            }\r\n          }\r\n        }\r\n\r\n        species {\r\n          name\r\n        }\r\n        homeworld {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nfunction Specie({Person}){\r\n  const isHuman = Person.node.species;\r\n\r\n  if(!isHuman){\r\n    return(<div className = \"specie\" >Human from {Person.node.homeworld.name} </div>)\r\n  }else{\r\n    return(<div className = \"specie\">{Person.node.species.name} from {Person.node.homeworld.name}</div>)\r\n  }\r\n}\r\n\r\n\r\nfunction Person({func, allPeople}){\r\n\r\n  return (\r\n    <div >\r\n       {allPeople.edges.map(Person => (\r\n         <div className = \"person\" key = {Person.node.id}  >\r\n            <div className = \"name\">{Person.node.name}</div>\r\n            <Specie Person = {Person}/>\r\n            <FontAwesomeIcon icon=\"chevron-right\" className= \"arrow button\" onClick={()=>{\r\n              func(Person);\r\n            }\r\n            }/>\r\n\r\n         </div>\r\n\r\n       ))}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nPerson.fragments = {\r\n  PeopleConnection: PERSON_FRAGMENT\r\n};\r\n\r\nexport {Person};\r\n","import React , {useState} from 'react';\r\nimport './people.css';\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nfunction Properties({node}){\r\n\r\n  if(node != null){\r\n  return(\r\n    <div className = \"properties \">\r\n\r\n      <div className = \"tituloPro\">General Information</div>\r\n      <div className = \"character\">\r\n        <div className = \"datapro\"> Eye Color </div>\r\n\r\n        <div className = \"dataproV\">{capitalizeFirstLetter(node.eyeColor)}</div>\r\n      </div>\r\n      <div className = \"character\">\r\n        <div className = \"datapro\"> Hair Color </div>\r\n        <div className = \"dataproV\"> {capitalizeFirstLetter(node.hairColor)} </div>\r\n      </div>\r\n      <div className = \"character\">\r\n        <div className = \"datapro\"> Skin Color </div>\r\n        <div className = \"dataproV\"> {capitalizeFirstLetter(node.skinColor)} </div>\r\n      </div>\r\n\r\n      <div className = \"character\">\r\n        <div className = \"datapro\"> Birth Year </div>\r\n        <div className = \"dataproV\"> {capitalizeFirstLetter(node.birthYear)} </div>\r\n      </div>\r\n\r\n      <div className = \"tituloPro\" > Vehicles </div>\r\n\r\n      <div >\r\n         {node.vehicleConnection.edges.map(Vehicle => (\r\n\r\n           <div className = \"character2 \" key = {Vehicle.node.id}  >\r\n              <div className = \"datapro\">{Vehicle.node.name}</div>\r\n\r\n           </div>\r\n\r\n\r\n         ))}\r\n\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n  )}else{return(<div></div>)}\r\n}\r\n\r\nexport default Properties;\r\n","import './people.css';\r\nimport {useState} from 'react';\r\nimport React, {Component} from 'react'\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport {Person} from \"./Person\";\r\nimport {filter} from \"graphql-anywhere\";\r\nimport {Waypoint} from 'react-waypoint';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Properties from './Properties.js'\r\n\r\nconst PEOPLE_QUERY = gql`\r\n  query peopleQuery( $after : String){\r\n    allPeople(first: 5 after: $after){\r\n      totalCount\r\n      ...PersonFragment\r\n      pageInfo{\r\n        endCursor\r\n        hasNextPage\r\n      }\r\n    }\r\n  }\r\n  ${Person.fragments.PeopleConnection}\r\n\r\n`;\r\n\r\n\r\nfunction People() {\r\n\r\n  const [props, setMyProps] = useState(false);\r\n\r\n  const { loading, error, data, fetchMore } = useQuery(PEOPLE_QUERY, {\r\n    variables: { after: null }\r\n  });\r\n\r\n  const [nodeT, setnode] = useState(null);\r\n\r\n\r\n\r\n  function prop(Character){\r\n    setMyProps(true);\r\n    setnode(Character.node);\r\n\r\n  }\r\n\r\n  if (loading) return <div className = \"Loading\">\r\n    <FontAwesomeIcon icon= \"spinner\" spin = {true}/> <div className = \"loadtext\">Loading</div>\r\n  </div>;\r\n  if (error){\r\n    console.log(error);\r\n    return <div className = \"failed\">Failed to Load Data</div>;\r\n  }\r\n  //console.log(data);\r\n  return (\r\n    <div className = \"bottonbar\">\r\n    <div className = \"listPeople\">\r\n      <Person func = {prop} allPeople = {filter(Person.fragments.PeopleConnection, data.allPeople)}/>\r\n      <Waypoint bottomOffset  = \"5%\" onEnter={()=>{\r\n        console.log(\"paltas2\");\r\n        if(data.allPeople.pageInfo.hasNextPage){\r\n          const {endCursor} = data.allPeople.pageInfo;\r\n          fetchMore({\r\n            variables: {after: endCursor},\r\n            updateQuery:(prevResult, {fetchMoreResult}) => {\r\n              fetchMoreResult.allPeople.edges = [...prevResult.allPeople.edges,\r\n              ...fetchMoreResult.allPeople.edges];\r\n              return fetchMoreResult;\r\n            }\r\n\r\n          })\r\n        }else{\r\n          console.log(\"Ya no hay mas\");\r\n        }\r\n\r\n      }}>\r\n        <div className = \"Loading\">\r\n\r\n           <FontAwesomeIcon className = \"mx-3\" icon= \"spinner\" spin = {true}/><div className = \"loadtext\">Loading</div>\r\n        </div>\r\n      </Waypoint>\r\n\r\n    </div>\r\n    <Properties  node = {nodeT}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default People;\r\n","import './App.css';\nimport \"./iconos\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\n\nimport People from './components/People';\n\n\nconst client = new ApolloClient({\n  uri: 'https://swapi-graphql.netlify.app/.netlify/functions/index',\n  cache: new InMemoryCache()\n});\n\n\n\n\nfunction App() {\n\n\n\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"container\">\n      <div className = \"headerRAVN\" > Ravn Star Wars Registry</div>\n\n      </div>\n      <People  />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}